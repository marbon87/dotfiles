filetype off
" ##################################################################################
" Vundle
" ##################################################################################
let os = substitute(system('uname'), "\n", "", "")
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
call vundle#begin()

" let Vundle manage Vundle. Required!
Bundle 'gmarik/vundle'

" File Browser
Bundle 'scrooloose/nerdtree'

" colorschemes
Bundle 'ScrollColors'
Bundle 'wombat256.vim'

Bundle 'bling/vim-airline'

" Command-T for quick File opening
Bundle 'wincent/command-t'

Bundle 'airblade/vim-gitgutter'

" Tagbar
Bundle 'majutsushi/tagbar'
" Autoformat
Bundle 'Chiel92/vim-autoformat'
" Multicursor
Bundle 'terryma/vim-multiple-cursors'
" Undotree
Bundle 'mbbill/undotree'

if os == "Darwin"
    Bundle 'Valloric/YouCompleteMe'

    " Snippets
    Bundle 'SirVer/ultisnips'
    Bundle 'honza/vim-snippets'
    " Dash Plugin
    Bundle 'rizzatti/dash.vim'
endif

" All of your Plugins must be added before the following line
call vundle#end()               " required
" ##################################################################################
" General Settings
" ##################################################################################
filetype plugin indent on       " required

set nocompatible 				" choose no compatibility with legacy vi
syntax on
set enc=utf-8                   " enable utf-8 (vim internal)
set fileencoding=utf-8          " enable utf-8 also for files
set showcmd						" display incomplete commands

set nowrap						" don't wrap lines
set shiftwidth=4                " set shift width to 4 chars (in front of a line, correspondent to smarttab)
set tabstop=4                   " set tab stops to 4 chars (not in front of line)
set softtabstop=4               " set tab stops to 4 chars (not in front of line)
set expandtab					" use spaces, not tabs (optional)
set backspace=indent,eol,start	" backspace through everything in insert mode

set hlsearch                    " highlight matches
set incsearch					" incremental searching
set ignorecase					" searches are case insensitive...
set smartcase					" ... unless they contain at least one capital letter
set smartindent                 " enable autoindenting for a new line
set smarttab                    " enable smart tabbing

let &t_Co=256                   " Colors in VIM
set number                      " Show current line number
set relativenumber              " Show relative line numbers

set cursorline                  " mark current line

colorscheme wombat256mod

" #####################################################################################
" Autocommands
" #####################################################################################
" Autostarts NERDTree if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * :call LineNumber(1)

" switch between absolute and relative
" autocmd InsertEnter * :call LineNumber(0)
" autocmd InsertLeave * :call LineNumber(1)
" #####################################################################################
" Functions
" #####################################################################################
" switch between absolute and relativ line numbers
" 0 Absolute, 1 Relative, sonst Toggle
function! LineNumber(mode)
    if(a:mode==0)  
        set norelativenumber
    elseif(a:mode==1)  
        set relativenumber
    else  
        if(&relativenumber == 1)
            set norelativenumber
        else
            set relativenumber
        endif
    endif
endfunc:

" #####################################################################################
" Mappings
" #####################################################################################

" Toogle NERDTree
map T :NERDTreeToggle<CR>

" Ctrl-N twice toggle numbers
" nmap <C-l><C-l> :set nonumber<cr>:set norelativenumber<cr>

nnoremap <C-l> :call LineNumber(-2)<cr>

" Window switching
map <silent> ∆ :wincmd k<CR>
map <silent> º :wincmd j<CR>
map <silent> ª :wincmd h<CR>
map <silent> @ :wincmd l<CR>

" YouCompleteMe
nnoremap ∂ :YcmCompleter GoTo<CR>

" CommandT
nnoremap † :CommandT<CR>

" Disable Arrow-Keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"

" Tagbar
nmap <F8> :TagbarToggle<CR>

" Autoformat
noremap <F3> :Autoformat<CR><CR>

" Undotree
nnoremap <F5> :UndotreeToggle<cr>

" #####################################################################################
" Plugin Settings
" #####################################################################################

" ycm settings
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.config/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0


" Automatically reload .vimrc
au! BufWritePost .vimrc source %

" Airline
let g:airline#extensions#tabline#enabled = 1

" Undotree
if has("persistent_undo")
    set undodir='~/.undodir/'
    set undofile
endif

